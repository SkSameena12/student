# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q0D6t5YhxtfUQnJMbOdeqny-7TYtSQ_n

**Student Marks Prediction using Linear Regression and Random Forest Regressor Model**

**Name : Shaik Sameena**

**Mentor : Ameen Manna**

**Domain : python using Datascience**

**Choose any dataset of your choice ,apply a suitable algorithm(Regression/Classification)
and create a model.**

**importing libraries**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

"""**load the data**"""

data = pd.read_csv('StudentsPerformance (1).csv')
d.head()

"""**Exploratory Data analysis**"""

data.shape

data.dtypes

data.info()

data.describe()

"""**visualization**"""

sns.scatterplot(data=data, x='math score', y='reading score')
plt.xlabel('Math Score')
plt.ylabel('Reading Score')
plt.title('Math vs Reading Score')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='parental level of education', hue='gender')
plt.xlabel('Parental Level of Education')
plt.ylabel('Count')
plt.title('Parental Education Level Distribution by Gender')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Gender')
plt.show()

sns.countplot(data=data, x='gender', hue='race/ethnicity')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Gender Count by Race/Ethnicity')
plt.legend(title='Race/Ethnicity', loc='upper right')
plt.show()

plt.scatter(y_reg_test, reg_predictions)
plt.xlabel('Actual Math Score')
plt.ylabel('Predicted Math Score')
plt.title('Actual vs Predicted Math Score')
plt.show()

coefs = pd.Series(reg_model.coef_, index=x_reg.columns)
coefs.sort_values().plot(kind='bar')
plt.xlabel('Feature')
plt.ylabel('Coefficient Value')
plt.title('Feature Coefficients')
plt.show()

"""**preprocessing**"""

data_encoded = pd.get_dummies(data, columns=['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course'])
data_cleaned = data_encoded.dropna()

# Separate features (x) and target variable (y)
x_reg = data_cleaned.drop(['math score'], axis=1)
y_reg = data_cleaned['math score']

# Split the dataset into training and testing sets
x_reg_train, x_reg_test, y_reg_train, y_reg_test = train_test_split(x_reg, y_reg, test_size=0.2, random_state=0)

"""**Linear Regression Model**"""

reg_model = LinearRegression()
reg_model.fit(x_reg_train, y_reg_train)

# Make Predictions on Testing Set
reg_predictions = reg_model.predict(x_reg_test)

# Calculate Mean Squared Error
reg_mse = mean_squared_error(y_reg_test, reg_predictions)

print(f'Regression Mean Squared Error: {reg_mse}')

"""**Random Forest Regressor Model**"""

reg_model = RandomForestRegressor(n_estimators=100, random_state=0)
reg_model.fit(x_reg_train, y_reg_train)

# Make Predictions on Testing Set
reg_predictions = reg_model.predict(x_reg_test)

# Calculate Mean Squared Error
reg_mse = mean_squared_error(y_reg_test, reg_predictions)

print(f'Regression Mean Squared Error: {reg_mse}')